import Service from '@ember/service';
import {
  ApolloClient,
  ApolloQueryResult,
  createHttpLink,
  InMemoryCache,
  MutationOptions,
  NormalizedCacheObject,
  ObservableQuery,
  OperationVariables,
  WatchQueryOptions,
  Observable,
  QueryOptions,
  SubscriptionOptions,
} from '@apollo/client/core';
import { getOwner } from '@ember/application';
// import { macroCondition, isTesting } from '@embroider/macros';
import { isNone, isPresent } from '@ember/utils';
import { A, isArray } from '@ember/array';
import RSVP from 'rsvp';
import { waitForPromise } from '@ember/test-waiters';
import { assert } from '@ember/debug';
import { get, set, setProperties, defineProperty } from '@ember/object';
import { Subscription } from 'zen-observable-ts';
import { TrackedArray, TrackedObject } from 'tracked-built-ins';
import { run, next } from '@ember/runloop';
import { sendEvent } from '@ember/object/events';
import { modelRegistry } from 'ember-apollo-data/model-registry';
import { extractNewData } from 'ember-apollo-data/-private/data-extractor';
import EADModel from 'ember-apollo-data/model/model';
import { EADModelList } from 'ember-apollo-data/-private/instance-list-manager';
import QueryManager from 'ember-apollo-data/-private/query-manager';
import ApplicationInstance from '@ember/application/instance';

const apolloObservableWeakMap = new WeakMap();

export function getObservable(queryResult: ApolloQueryResult<NormalizedCacheObject>) {
  return apolloObservableWeakMap.get(queryResult);
}

export function unsubscribe(queryResult: ApolloQueryResult<NormalizedCacheObject>) {
  let fn = apolloObservableWeakMap.get(queryResult).get("unsubscribe");

  if (typeof fn === 'function') {
    return fn();
  }
}

class EmberApolloSubscription {
  lastEvent = null;
  _apolloClientSubscription: Subscription | null = null;

  apolloUnsubscribe() {
    if (this._apolloClientSubscription) {
      this._apolloClientSubscription.unsubscribe();
    }
    throw new Error("Cannot unsibscribe because not subscribed.");
  }

  _onNewData(newData: any) {
    set(this, 'lastEvent', newData);
    sendEvent(this, 'event', [newData]);
  }
}




export default class EADStoreService extends Service {
  declare client: ApolloClient<NormalizedCacheObject>;

  constructor(args: any){
    super(args);
    this.client = new ApolloClient(
      this.clientOptions()
    );
  }

  /**
   * This is the options hash that will be passed to the ApolloClient constructor.
   * You can override it if you wish to customize the ApolloClient.
   *
   * @method clientOptions
   * @return {!Object}
   * @public
   */
  clientOptions = () => {
    return {
      cache: this.cache(),
      link: this.link()
    }
  };


  link() {
    const { apiURL, requestCredentials } = this.options;
    const linkOptions: {
      uri: string | undefined,
      fetch: (input: RequestInfo | URL, init?: RequestInit | undefined) => Promise<Response>;
      credentials: string | undefined
    } = { uri: apiURL, fetch, credentials: undefined };

    if (isPresent(requestCredentials)) {
      linkOptions.credentials = requestCredentials;
    };
    return createHttpLink(linkOptions);
  }


  cache = () => {
    return new InMemoryCache();
  }

  /**
   * Implements a destructor for client
   */
  willDestroy() {
    if (this.client && typeof this.client.clearStore === 'function') {
      this.client.clearStore();
    }
  }

  // options are configured in your environment.js.
  get options() {
    // config:environment not injected into tests, so try to handle that gracefully.
    let config = (getOwner(this) as ApplicationInstance).resolveRegistration('config:environment') as { ['ember-apollo-data']?: Record<string, string>, [key: string | number | symbol]: unknown };
    if (config && config['ember-apollo-data']) {
      return config['ember-apollo-data'];
    } 
    // else if (macroCondition(isTesting())) {
    //   return {
    //     apiURL: 'http://testserver.example/v1/graph',
    //   };
    // }
    throw new Error('No Apollo service options are defined!');
  }


  /**
 * Executes a mutation on the Apollo client. The resolved object will
 * never be updated and does not have to be unsubscribed.
 *
 * @method mutate
 * @param {!import('@apollo/client').MutationOptions} opts The query options used in the Apollo Client mutate.
 * @param {String} resultKey The key that will be returned from the resulting response data. If null or undefined, the entire response data will be returned.
 * @return {!Promise}
 * @public
 */
  mutate = async (opts: MutationOptions, resultKey: string | null | undefined): Promise<unknown> => {
    const clientOn = isPresent(this.client) && this.client instanceof ApolloClient
    assert(
      `Cannot mutate, because the Apollo client is '${this.client}'.`,
      clientOn
    );
    if (clientOn) {
      return waitForPromise(
        new RSVP.Promise((resolve, reject) => {
          (this.client as ApolloClient<NormalizedCacheObject>)
            .mutate(opts)
            .then((result) => {
              let dataToSend = isNone(resultKey)
                ? result.data
                : get(result.data, resultKey);
              return resolve(dataToSend);
            })
            .catch((error) => {
              let errors;
              if (isPresent(error.networkError)) {
                error.networkError.code = 'network_error';
                errors = [error.networkError];
              } else if (isPresent(error.graphQLErrors)) {
                errors = error.graphQLErrors;
              }
              if (errors) {
                return reject({ errors });
              }
              throw error;
            });
        })
      );
    }
  }

  /**
 * Executes a single `query` on the Apollo client. The resolved object will
 * never be updated and does not have to be unsubscribed.
 *
 * @method query
 * @param {!import('@apollo/client').QueryOptions} opts The query options used in the Apollo Client query.
 * @param {String} resultKey The key that will be returned from the resulting response data. If null or undefined, the entire response data will be returned.
 * @return {!Promise}
 * @public
 */
  query(opts: QueryOptions, resultKey: string | null | undefined) {
    return waitForPromise(
      new RSVP.Promise((resolve, reject) => {
        this.client
          .query(opts)
          .then((result) => {
            let response = result.data;
            if (!isNone(resultKey) && response) {
              response = get(response, resultKey);
            }

            if (
              opts.errorPolicy === 'all' &&
              result.errors &&
              result.errors.length > 0
            ) {
              return reject(
                // new ApolloErrorWithResponse({
                //   response,
                //   errors: result.errors,
                // })
              );
            }

            return resolve(response);
          })
          .catch((error) => {
            return reject(error);
          });
      })
    );
  }

  /**
   * Executes a `watchQuery` on the Apollo client and tracks the resulting
   * subscription on the provided query manager.
   *
   * @method managedWatchQuery
   * @param {!QueryManager} manager A QueryManager that should track this active watchQuery.
   * @param {!import('@apollo/client').WatchQueryOptions} opts The query options used in the Apollo Client watchQuery.
   * @param { string | null | undefined } resultKey The key that will be returned from the resulting response data. If null or undefined, the entire response data will be returned.
   * @return {!Promise<unknown>}
   * @private
   */
  managedWatchQuery = (manager: QueryManager, opts: QueryOptions, resultKey?: string | null | undefined): Promise<unknown> => {
    let observable = this.client.watchQuery(opts);
    let subscription: Subscription;

    function unsubscribe() {
      subscription && subscription.unsubscribe();
    }


    return waitForPromise(
      new RSVP.Promise((resolve, reject) => {
        subscription = observable.subscribe({
          next: this.newDataFunc(observable, resultKey, resolve, unsubscribe),
          error(e) {
            reject(e);
          },
        });
        manager.trackSubscription(subscription);
      })
    );
  }


  /**
   * Executes a `watchQuery` on the Apollo client. If updated data for this
   * query is loaded into the store by another query, the resolved object will
   * be updated with the new data.
   *
   * When using this method, it is important to call `apolloUnsubscribe()` on
   * the resolved data when the route or component is torn down. That tells
   * Apollo to stop trying to send updated data to a non-existent listener.
   *
   * @method watchQuery
   * @param {!import('@apollo/client').WatchQueryOptions} opts The query options used in the Apollo Client watchQuery.
   * @param { string | null | undefined } resultKey The key that will be returned from the resulting response data. If null or undefined, the entire response data will be returned.
   * @return {!Promise<unknown>}
   * @public
   */
  watchQuery = async(opts: WatchQueryOptions, resultKey?: string | null | undefined): Promise<Subscription> => { // Record<string, any> to nodetype GH
    // watchQuery on Apollo
    let observable = this.client.watchQuery(opts);

    // declare a subscription
    let subscription: Subscription;

    // an unsubscribe function to pass to the subscription promise
    function unsubscribe() {
      if (subscription && !subscription.closed) {
        subscription.unsubscribe();
      }
    }

    return waitForPromise(
      new RSVP.Promise<Subscription>((resolve, reject) => {
        // TODO: add an error function here for handling errors
        subscription = observable.subscribe({
          next: this.newDataFunc(observable, resultKey, resolve, unsubscribe),
          error(e) {
            reject(e);
          },
        });
      })
    );
  }

  /**
   * Executes a `subscribe` on the Apollo client. If this subscription receives
   * data, the resolved object will be updated with the new data.
   *
   * When using this method, it is important to call `apolloUnsubscribe()` on
   * the resolved data when the route or component is torn down. That tells
   * Apollo to stop trying to send updated data to a non-existent listener.
   *
   * @method subscribe
   * @param {!import('@apollo/client').SubscriptionOptions} opts The query options used in the Apollo Client subscribe.
   * @param { string | null | undefined } resultKey The key that will be returned from the resulting response data. If null or undefined, the entire response data will be returned.
   * @return { !Promise<unknown> }
   * @public
   */
  subscribe = (opts: SubscriptionOptions, resultKey: string | null | undefined = null): Promise<any> => {
    const observable = this.client.subscribe(opts);

    const obj = new EmberApolloSubscription();

    return waitForPromise(
      new RSVP.Promise((resolve, reject) => {
        let subscription = observable.subscribe({
          next: (newData) => {
            let dataToSend = extractNewData(resultKey, newData);
            if (dataToSend === null) {
              // see comment in extractNewData
              return;
            }

            run(() => obj._onNewData(dataToSend));
          },
          error(e) {
            reject(e);
          },
        });

        obj._apolloClientSubscription = subscription;

        resolve(obj);
      })
    );
  }


  /**
   * Executes a `subscribe` on the Apollo client and tracks the resulting
   * subscription on the provided query manager.
   *
   * @method managedSubscribe
   * @param {!QueryManager} manager A QueryManager that should track this active subscribe.
   * @param {!import('@apollo/client').SubscriptionOptions} opts The query options used in the Apollo Client subscribe.
   * @param { string | null | undefined } resultKey The key that will be returned from the resulting response data. If null or undefined, the entire response data will be returned.
   * @return {!Promise<unknown>}
   * @private
   */
  managedSubscribe = async (manager: QueryManager, opts: SubscriptionOptions<OperationVariables, any>, resultKey: string | null | undefined = null): Promise<unknown> => {
    const obj = await this.subscribe(opts, resultKey);
    manager.trackSubscription((obj as any)._apolloClientSubscription);
    return obj;
  }

  createQueryManager() {
    return new QueryManager(this);
  }



  /** function newDataFunc
  * deserializes the data for request
  * @returns { Function } that uses resolve to resolvethe object
  */
  private newDataFunc = (
    observable: Observable<ApolloQueryResult<Record<string, any>>>, // maybe replace Record<string, any> with the type from node registry GH
    resultKey: string | null | undefined,
    resolve: (value?: any) => void,
    unsubscribeFn: null | (() => void) = null
  ): (newData: Object) => void => {
    let obj: Record<string, any> | Record<string, any>[];
    let contents: {
      instantiated: EADModel | EADModelList | undefined,
      observable: Observable<ApolloQueryResult<Record<string, any>>> | undefined,
    } = new TrackedObject({
      instantiated: undefined,
      observable: undefined,
      unsubscribe: undefined,
    });

    return (newData: Object) => {
      let dataToSend = extractNewData(resultKey, newData);

      if (dataToSend === null) {
        // see comment in extractNewData
        return;
      }

      if (isNone(obj)) {
        if (isArray(dataToSend)) {
          obj = new TrackedArray([...dataToSend as Record<string, any>[]]) as Record<string, any>[];
          if (!apolloObservableWeakMap.has(obj)) {
            contents.instantiated = this.createEncapsulatedData(obj);
            contents.observable = observable;
            // TODO: deal with meta
            apolloObservableWeakMap.set(obj, contents);
          }
        } else {
          obj = new TrackedObject({ ...dataToSend });
          if (!apolloObservableWeakMap.has(obj)) {
            Object.keys(obj).forEach(key => {
              //GH
            })
            contents.instantiated = this.createEncapsulatedData(obj);
            contents.observable = observable;
            apolloObservableWeakMap.set(obj, contents);
            // TODO: deal with meta
          }
        }

        if (unsubscribeFn && !apolloObservableWeakMap.has(obj)) {
          apolloObservableWeakMap.get(obj).set(unsubscribe, unsubscribeFn);
        }

        return resolve(apolloObservableWeakMap.get(obj).get('instantiated'));
      }

      next(() => {
        const objMapping = apolloObservableWeakMap.get(obj);
        if (isArray(obj)) {
          // Loop through obj and update the corresponding instances
          obj = new TrackedArray([...dataToSend as Record<string, any>[]]) as Record<string, any>[];
          (obj as Record<string, any>[]).forEach((newData: any, index: number) => {
            // find the respective instance and update it.
            const instance = objMapping.instantiated[index];
            instance.encapsulate(newData);
            // TODO: deal with meta
          });
        } else {
          setProperties(obj, dataToSend!); // dataToSend cannot be null, as we bail out when it is null and this portion of the code doe snot execute
          const instance = objMapping.instance;
          instance.encapsulate(obj);
        }
      });
    };
  }

  /**
   * Returns an appropriate instance of EADModel with inputted data;
   * @param { Record<string, any> } item raw data
   * @returns { EADModel } EAD-Model instance
   */
  create = (typeName: string): EADModel => {
    assert(
      `Queries to graphql endpoint must include '__typename' and receive '__typename' for each ObjectType, in order to populate encapsulated data!`,
      typeName,
    );
    const model = this.modelFor(typeName);
    return new model(getOwner(this), typeName);
  }

  private createEncapsulatedData = (obj: any | any[]) => {
    if (isArray(obj)) {
      const items: any[] = obj as any[];
      const list = new EADModelList([]);
      items.forEach((item: Record<string, any>, index: number) => {
        const modelName: string = item["__typename"]
        const instance = this.create(modelName);
        list.push(instance);
      });
      return list;
    } else {
      const item = obj as any;
      const modelName: string = item["__typename"]
      const instance = this.create(modelName);
      return instance;
    }
  };

  public modelFor = (modelName: string): typeof EADModel => {
    const prototype = modelRegistry[modelName];
    if (prototype) {
      Object.defineProperty(prototype.constructor, 'modelName', {
        value: modelName,
        writable: false,
        enumerable: false,
        configurable: false,
      });
      return prototype as typeof EADModel;
    }
    throw new Error(`No ead-model of type ${modelName} was found.`);
  }

}

// Don't remove this declaration: this is what enables TypeScript to resolve
// this service using `Owner.lookup('service:ead-store')`, as well
// as to check when you pass the service name as an argument to the decorator,
// like `@service('ead-store') declare altName: EadStoreService;`.
declare module '@ember/service' {
  interface Registry {
    'ead-store': EADStoreService;
  }
}

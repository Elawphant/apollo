import Service from '@ember/service';
import { getOwner, setOwner } from '@ember/application';
import EADModel from 'ember-apollo-data/model/model';
import ApplicationInstance from '@ember/application/instance';
import { isPresent } from '@ember/utils';
import { assert } from '@ember/debug';
import { guidFor } from '@ember/object/internals';
import { registerDestructor } from '@ember/destroyable';
import { camelize, capitalize, dasherize, underscore } from '@ember/string';
import { pluralize } from 'ember-inflector';
import { get, set } from '@ember/object';
import {
  gql,
  Client,
  createRequest,
  fetchExchange,
  mapExchange,
  type ClientOptions,
  type OperationResult,
} from '@urql/core';
import { cacheExchange, offlineExchange } from '@urql/exchange-graphcache';
import { relayPagination } from '@urql/exchange-graphcache/extras';
import { EdgeManager } from 'ember-apollo-data/model/edge';
import { encapsulatorExchange } from 'ember-apollo-data/exchanges/encapsulator';
import { TrackedMap, tracked } from 'tracked-built-ins';

const client_destructor = (destroyable: EADStoreService) => {
  // if (destroyable.client && typeof destroyable.client.clearStore === 'function') {
  //   destroyable.client.clearStore();
  // };
};

export default class EADStoreService extends Service {
  declare client: Client;

  @tracked
  NODE_REFERENCE_MAP: Map<string, EADModel> = new Map();
  @tracked
  EDGE_REFERENCE_MAP: Map<number, EdgeManager> = new Map();

  public get CACHE_CONFIG(): any {
    return {
      directives: {
        relayPagination,
      },
    };
  }

  init(): void {
    super.init();
    this.client = new Client(this.clientOptions());
    registerDestructor(this, client_destructor);
  }

  /**
   * This is the options hash that will be passed to the ApolloClient constructor.
   * You can override it if you wish to customize the ApolloClient.
   *
   * @method clientOptions
   * @return {!Object}
   * @private
   */
  private clientOptions = (): ClientOptions => {
    return {
      url: this.options['apiURL'] as string,
      exchanges: [
        cacheExchange(this.CACHE_CONFIG),
        fetchExchange,
      ],
    };
  };

  /**
   * Persists Data to the server by generating and executing mutation operations
   * @param saveables : list of EADModel subclasses for automatic mutation configration
   * @param customMutationOptions : a custom client.mutate method object for custom mutation operations
   * @returns Promise<void>
   */
  public save = async (
    saveables?: { [operationName: string]: EADModel[] },
    customMutationOptions?: { mutation: string; variables: any },
  ): Promise<void> => {
    assert(
      `Save method requires saveables: { [operationName: string]: EADModel[] } or a customMutationOptions: { mutation: DocumentNode, variables: Object}`,
      saveables || customMutationOptions,
    );
    if (customMutationOptions) {
      const { mutation, variables } = customMutationOptions;
      this.mutateAndUpdateCache(mutation, variables);
    }
    const ops: string[] = [];
    const vars: any = {};

    Object.keys(saveables!).forEach((operation: string) => {
      const instances = saveables![operation]!;
      assert(
        `All passed instances should be of the same type`,
        instances.every((instance) => typeof instance === typeof instances[0]!),
      );
      const commonType = instances[0]!.constructor as typeof EADModel;
      if (operation === 'create') {
        assert(
          `No ${commonType.name}.APOLLO_CONFIG.createInputTypeName is specified`,
          commonType.APOLLO_CONFIG.createInputTypeName,
        );
        assert(
          `No ${commonType.name}.APOLLO_CONFIG.createRootField is specified`,
          commonType.APOLLO_CONFIG.createRootField,
        );
        const { mutation, variables } = this.configureMutationOperation(
          instances,
          {
            commonType: commonType,
            inputTypeName: commonType.APOLLO_CONFIG.createInputTypeName!,
            mutationRootField: commonType.APOLLO_CONFIG.createRootField!,
            excludeKeys: ['id'],
          },
        );
        ops.push(mutation);
        Object.assign(vars, variables);
      }
      if (operation === 'update') {
        assert(
          `No ${commonType.name}.APOLLO_CONFIG.createInputTypeName is specified`,
          commonType.APOLLO_CONFIG.createInputTypeName,
        );
        assert(
          `No ${commonType.name}.APOLLO_CONFIG.createRootField is specified`,
          commonType.APOLLO_CONFIG.createRootField,
        );
        const { mutation, variables } = this.configureMutationOperation(
          instances,
          {
            commonType: commonType,
            inputTypeName: commonType.APOLLO_CONFIG.updateInputTypeName!,
            mutationRootField: commonType.APOLLO_CONFIG.updateRootField!,
          },
        );
        ops.push(mutation);
        Object.assign(vars, variables);
      }
      if (operation === 'delete') {
        assert(
          `No ${commonType.name}.APOLLO_CONFIG.deleteInputTypeName is specified`,
          commonType.APOLLO_CONFIG.createInputTypeName,
        );
        assert(
          `No ${commonType.name}.APOLLO_CONFIG.deleteRootField is specified`,
          commonType.APOLLO_CONFIG.createRootField,
        );
        const { mutation, variables } = this.configureMutationOperation(
          instances,
          {
            commonType: commonType,
            inputTypeName: commonType.APOLLO_CONFIG.deleteInputTypeName!,
            mutationRootField: commonType.APOLLO_CONFIG.deleteRootField!,
          },
        );
        ops.push(mutation);
        Object.assign(vars, variables);
      }
    });
    this.mutateAndUpdateCache(ops.join('\n'), vars);
  };

  public mutateAndUpdateCache = async (
    document: string,
    variables: any,
  ): Promise<OperationResult> => {
    try {
      const promise = this.client.mutation(document, variables);
      // const result = await promise;
      // TODO: instead of returning the result, pass it to a resolver, to handle the data and return the EADModel subclass instances
      return await promise;
    } catch (e: any) {
      throw new Error(e);
    }
  };

  public query = async (modelName: string, queryOptions: any = {}): Promise<EdgeManager> => {
    const ModelConstructor = this.RETREIVE_MODEL_CONSTRUCTOR(modelName);
    const { query, variables } = this.configureEdgesQueryOperation([
      ModelConstructor,
    ]);
    const result = await this.client.query(query, {
      variables: variables,
      canonizeResults: true,
      ...queryOptions,
      client: this.client,
    });

    const { data, error, extensions, hasNext, operation, stale } = result as any;
    const kind = operation.kind;
    const key = operation.key;
    let manager: any;
    if (result && ['query', 'mutation', 'teardown'].includes(kind)) {
      if (data) {
        Object.keys(data).forEach((rootField) => {
          const edges = data[rootField]?.edges;
          assert(
            "Recieved wrong type of data from server, Edges expected.",
            edges && Array.isArray(edges)
          )
          const pageInfo = data[rootField].pageInfo;
          manager = this.GET_OR_CREATE_EDGE(
            edges,
            pageInfo,
            key,
          );
        });
      }
    }
    return manager.edge
  };

  public configureEdgesQueryOperation = (
    queries: {
      modelName: string;
      arguments?: { [key: string]: any };
    }[],
  ) => {
    const OPERATIONS: string[] = [];
    const VARIABLES: { [key: string]: string | null | undefined } = {};

    queries.forEach((query, index) => {
      const suffix = index.toString();
      const type = this.RETREIVE_MODEL_CONSTRUCTOR(query.modelName);
      const rootField = type.APOLLO_CONFIG.listRootField!;
      const instance = this.INITIALIZE_INSTANCE(type);
      const operationName = `${capitalize(rootField)}EdgesOperation`;
      const argumentsConfig = type.APOLLO_CONFIG.queryArguments;
      const QUERY_VARS: string[] = [];
      const QUERY_ARGS: string[] = [];
      const VARIABLES: { [key: string]: any } = {};
      if (argumentsConfig) {
        Object.entries(argumentsConfig).forEach(([key, val]) => {
          QUERY_VARS.push(`$${key + suffix}: ${val}`);
          QUERY_ARGS.push(`${key}: ${key + suffix}`);
          if (query.arguments && query.arguments[key]) {
            VARIABLES[key + suffix] = query.arguments[key];
          }
        });
      }

      const VARS = QUERY_VARS.join(', ');
      const ARGS = QUERY_ARGS.join(', ');

      // TODO: enforce relay pagination
      OPERATIONS.push(`
        query ${operationName + suffix} ${VARS} {
          ${rootField} ${ARGS} {
            __typename
            edges {
              __typename
              node {
                __typename
                id
                ${instance.FIELDS_ON_TYPE}
              }
              cursor
            }
            pageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }
          }
        }
      `);
    });
    return {
      query: OPERATIONS.join('\n'),
      variables: VARIABLES,
    };
  };

  public configureSingleQueryOperation = (instances: EADModel[]) => {
    const OPERATIONS: string[] = [];
    const VARIABLES: { [key: string]: string | null | undefined } = {};
    instances.forEach((instance, index) => {
      const rootField = (instance.constructor as typeof EADModel).APOLLO_CONFIG
        .itemRootField!;
      const operationName = `${capitalize(rootField)}Operation`;
      const suffix = index.toString();
      const queryVar = camelize(rootField) + suffix;
      OPERATIONS.push(`
      query ${operationName + suffix} ( $${queryVar}: ID! ) {
        ${rootField}( id: $${queryVar}) {
          ${instance.FIELDS_ON_TYPE}
        }
      }
      `);
      VARIABLES[rootField] = instance.CLIENT_ID as string | null | undefined;
    });
    return {
      query: OPERATIONS.join('\n'),
      variables: VARIABLES,
    };
  };

  public configureMutationOperation = (
    instances: EADModel[],
    options: {
      commonType: typeof EADModel;
      inputTypeName: string;
      mutationRootField: string;
      excludeKeys?: string[];
    },
  ): { mutation: string; variables: Object } => {
    const { commonType, inputTypeName, mutationRootField, excludeKeys } =
      options;
    const inputFieldName = commonType.APOLLO_CONFIG.inputFieldName ?? 'data';
    const operationName = `${capitalize(mutationRootField)}Operation`;
    const OPERATIONS: string[] = [];
    const VARIABLES: { [key: string]: Object } = {};
    instances.forEach((instance, index) => {
      const suffix = index.toString();
      const inputVar = pluralize(`${camelize(mutationRootField)}`);
      OPERATIONS.push(`
      mutation ${operationName + suffix} ( $${inputVar + suffix
        }: ${inputTypeName}!) {
        ${options.mutationRootField}( input: $${inputVar + suffix}){
          ${commonType.APOLLO_CONFIG.itemRootField} { 
            ${instance.FIELDS_ON_TYPE}
          }
        }
      }
      `);
      const data = instance.PREPARE_MUTATION_DATA();
      const excludeProps = excludeKeys || [];
      excludeProps.forEach((key) => {
        delete data[key];
      });
      VARIABLES[inputVar + suffix] = {
        [inputFieldName]: data,
        clientMutationId: instance.id,
      };
    });
    return {
      mutation: OPERATIONS.join('\n'),
      variables: VARIABLES,
    };
  };

  // options are configured in your environment.js.
  public get options() {
    // config:environment not injected into tests, so try to handle that gracefully.
    const config = (getOwner(this) as ApplicationInstance).resolveRegistration(
      'config:environment',
    ) as {
      ['ember-apollo-data']?: Record<string, string>;
      [key: string | number | symbol]: unknown;
    };
    if (config && config['ember-apollo-data']) {
      return config['ember-apollo-data'];
    }
    // else if (macroCondition(isTesting())) {
    //   return {
    //     apiURL: 'http://testserver.example/v1/graph',
    //   };
    // }
    throw new Error('No Apollo service options are defined!');
  }

  /**
   *
   * @param document
   * @param variables
   * @returns
   */
  public identify = (document: string, variables: any) => {
    return this.client.readQuery(document, variables);
  };

  /**
   * Creates in-memory cache object with default values, encapsulates it and returns a proxy to it.
   * If you need initial values, instead pass them via @attr options.defaultValue or the transformer that does encapsulation.
   * @param modelName
   * @param rootField
   * @param options
   * @returns
   */
  create = (modelName: string): EADModel => {
    const modelConstructor = this.RETREIVE_MODEL_CONSTRUCTOR(modelName);
    const rootField = modelConstructor.APOLLO_CONFIG.itemRootField;
    if (!rootField) {
      throw new Error(
        `Cannot create an instance: "itemRootField" on APOLLO_CONFIG on ${modelName} was not provided!`,
      );
    }
    const instance = this.INITIALIZE_INSTANCE(modelConstructor);
    Object.entries(instance.CONFIGURE_DEFAULT_DATA()).forEach(([key, value]) =>
      set(instance, key as keyof EADModel, value),
    );
    this.KEEP_NODE(instance);
    return this.NODE_REFERENCE_MAP.get(instance.CLIENT_ID) as EADModel;
  };

  private RETREIVE_MODEL_CONSTRUCTOR = (modelName: string) => {
    const ModelConstructor = (
      getOwner(this) as ApplicationInstance
    ).resolveRegistration(`model:${modelName}`) as typeof EADModel | undefined;
    assert(
      `No model extending EADModel found for ${modelName}`,
      ModelConstructor && typeof ModelConstructor === typeof EADModel,
    );
    // set a constructor modelName for similarity with EmberData
    ModelConstructor.modelName = modelName;
    ModelConstructor;
    // add the type policy to the apollo cache.
    // this.ADD_TYPE_POLICIES([ModelConstructor]);
    return ModelConstructor;
  };

  private INITIALIZE_INSTANCE = (
    ModelConstructor: typeof EADModel,
  ): EADModel => {
    return new ModelConstructor(getOwner(this));
  };

  public KEEP_NODE = (instance: EADModel) => {
    this.NODE_REFERENCE_MAP.set(instance.CLIENT_ID, new Proxy(instance, {}));
  };

  public KEEP_EDGE = (edge: EdgeManager) => {
    this.EDGE_REFERENCE_MAP.set(edge.id, new Proxy(edge, {}));
  };

  private GET_OR_CREATE_NODE = (modelName: string, id?: string | undefined) => {
    const created = this.create(modelName);
    if (id) {
      const existing = this.NODE_REFERENCE_MAP.get(id);
      if (existing) {
        return existing;
      }
      created.id = id;
    }
    return created;
  };

  private GET_OR_CREATE_EDGE = (edges: any[], pageInfo: any, id: number) => {
    // ensure all nodes are encapsualted
    const nodes = [];
    edges.forEach((edge) => {
      const modelName = dasherize(edge.node.__typename);
      nodes.push(this.GET_OR_CREATE_NODE(modelName, edge.node.id));
    });

    const existing = this.EDGE_REFERENCE_MAP.get(id);
    if (existing) {
      existing.identifyNodes(edges, pageInfo);
      return existing;
    }
    const created = new EdgeManager(this, id);
    created.identifyNodes(edges, pageInfo);
    this.KEEP_EDGE(created);
    return this.EDGE_REFERENCE_MAP.get(id);
  };


  /**
   * This method creates a single mutation query for passed instances and sends to server
   * @param instances
   * @return { Promise<unknown> }
   */
  // mutate = async (instances: EADModel[]) => {
  //   const document: string[] = [];
  //   const mutations = instances.map(instance => instance.prepareMutation())
  //   const operation = gql`
  //     mutation MultiObjectMutationOperation {

  //     }
  //   `
  // }
}

// Don't remove this declaration: this is what enables TypeScript to resolve
// this service using `Owner.lookup('service:ead-store')`, as well
// as to check when you pass the service name as an argument to the decorator,
// like `@service('ead-store') declare altName: EadStoreService;`.
declare module '@ember/service' {
  interface Registry {
    'ead-store': EADStoreService;
  }
}
